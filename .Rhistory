#   date_part <- gsub(".*(\\d{2}-\\d{2}-\\d{4}).*", "\\1", basename(file_name))
#   as.Date(date_part, format="%m-%d-%Y")
# }
#
# # Funktion, um die Daten zu lesen und zu bereinigen
# read_and_clean <- function(file) {
#   data <- read_csv(file, show_col_types = FALSE)
#   date_from_filename <- extract_date(file)
#   if (is.na(date_from_filename)) {
#     stop(paste("Datumskonvertierung fehlgeschlagen für Datei:", file))
#   }
#   # Konvertieren Sie alle Datum-/Zeit-Spalten in das gleiche Format, z.B. als character
#   data$Last_Update <- as.character(data$Last_Update)
#   mutate(data, Datum = date_from_filename)
# }
#
# # Daten einlesen und eine Datumsspalte hinzufügen
# list_data <- pblapply(files, read_and_clean)
#
# # Alle DataFrames zusammenführen
# final_data <- bind_rows(list_data)
#
# # Größe des DataFrames in MB berechnen
# dataframe_size <- object.size(final_data) / (1024^2)
# print(paste("Die Größe des DataFrames ist:", dataframe_size, "MB"))
#
# # Temporären Ordner löschen, wenn er nicht mehr benötigt wird
# unlink(temp_dir, recursive = TRUE)
# # Pfad zum Zip-Ordner
# zip_path <- "./data/csse_covid_19_daily_reports.zip"
#
# # Entpacke den Zip-Ordner in ein temporäres Verzeichnis
# temp_dir <- tempdir()
# unzip(zip_path, exdir = temp_dir)
#
# # Liste aller CSV-Dateien im Unterordner des entpackten Zip-Ordners
# files <- list.files(path = temp_dir, pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
#
# # Funktion, um das Datum aus dem Dateinamen zu extrahieren
# extract_date_from_filename <- function(filename) {
#   date_part <- gsub(".*(\\d{2}-\\d{2}-\\d{4}).csv", "\\1", basename(filename))
#   as.Date(date_part, format = "%d-%m-%Y")
# }
#
# # Funktion, um eine einzelne Datei zu lesen und das Datum hinzuzufügen
# read_csv_with_date <- function(file) {
#   df <- read_csv(file, col_types = cols())
#
#   # Überprüfen, ob die Spalte 'Last Update' existiert und keine leeren Werte hat
#   if (Last_Update %in% names(df) && nrow(df) > 0) {
#     df <- df %>% mutate(Last_Update = as.character(Last_Update))
#   } else {
#     warning(paste("Spalte 'Last Update' fehlt oder ist leer in Datei:", file))
#   }
#
#   date <- extract_date_from_filename(file)
#   df$date <- date
#   return(df)
# }
#
# # read_csv_with_date <- function(file) {
# #   # Bestimmen der Spalten, die gelesen werden sollen. 'Last Update' wird übersprungen
# #   col_types <- cols(`Last Update` = col_skip())
# #   df <- read_csv(file, col_types = col_types)
# #
# #   date <- extract_date_from_filename(file)
# #   df$date <- date
# #   return(df)
# # }
#
# # Lese alle Dateien und füge sie zusammen, zeige Fortschrittsbalken an
# all_data <- pblapply(files, read_csv_with_date) %>% bind_rows()
#
# # Größe des Dataframes in MB ausgeben
# dataframe_size <- object.size(all_data) / (1024^2)
# print(paste("Größe des Dataframes:", dataframe_size, "MB"))
#
# # Das resultierende Dataframe anzeigen (optional)
# print(all_data)
#
# # Aufräumen und temporäres Verzeichnis löschen
# unlink(temp_dir, recursive = TRUE)
# Einlesen der csv-Datei
df <- read.csv("COVID19_SHORT.csv")
dataframe_size1 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size1, "MB"))
head(df)
glimpse(df)
df <- df %>%
mutate(Date = ymd(Date)) %>%
mutate_at(vars(Confirmed, Deaths), as.integer)
dataframe_size2 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size2, "MB"))
dataframe_size1-dataframe_size2
glimpse(df)
df <- df %>%
filter(!(is.na(Confirmed) | Confirmed == 0 | is.na(Deaths) | Deaths == 0))
df <- df %>%
arrange(Date)
# Überprüfen, ob alle Daten zwischen Start- und Enddatum vorhanden sind
date_sequence <- seq.Date(from = min(df$Date), to = max(df$Date), by = "day")
all_dates_present <- all(date_sequence %in% df$Date)
print(all_dates_present)
df %>%
filter(!is.na(Country_Region),
!is.na(Country.Region))
df %>%
filter(!is.na(Province_State),
!is.na(Province.State))
df <- df %>%
mutate(Country_Region = if_else(is.na(Country_Region), Country.Region, Country_Region)) %>%
mutate(Province_State = if_else(is.na(Province_State), Province.State, Province_State))
df <- df %>%
select(Date, Country_Region, Province_State, Confirmed, Deaths)
dataframe_size3 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size3, "MB"))
dataframe_size2-dataframe_size3
df <- df %>%
group_by(Date, Country_Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
dataframe_size4 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size4, "MB"))
dataframe_size3-dataframe_size4
stop()
# unique_countries <- unique(df$Country_Region)
unique_countries <- df %>%
select(Country_Region) %>%
distinct(Country_Region) %>%
arrange(Country_Region) %>%
pull(Country_Region)
print(unique_countries)
distances <- adist(unique_countries)
threshold <- nchar(unique_countries) * 0.3
similar_countries <- which(distances < threshold, arr.ind = TRUE)
similar_countries <- similar_countries[similar_countries[,1] != similar_countries[,2], ]
similar_country_pairs <- unique(t(apply(similar_countries, 1, function(idx) unique_countries[idx])))
print(similar_country_pairs)
get_similar_text_pairs <- function(df, threshold_num) {
unique_text <- df %>%
arrange(Country_Region) %>%
distinct(Country_Region) %>%
pull(Country_Region)
distances <- adist(unique_text)
threshold <- nchar(unique_text) * threshold_num
similar_text <- which(distances < threshold, arr.ind = TRUE)
similar_text <- similar_text[similar_text[,1] != similar_text[,2], ]
similar_text_pairs <- unique(t(apply(similar_text, 1, function(idx) unique_text[idx])))
return(similar_text_pairs)
}
print(get_similar_text_pairs(df, 0.3))
name_mapping <- c('Viet Nam' = 'Vietnam',
'Korea, South' = 'South Korea',
'Republic of Korea' = 'South Korea',
'Bahamas, The' = 'The Bahamas',
'Taiwan*' = 'Taiwan',
' Azerbaijan' = 'Azerbaijan',
'Cabo Verde' = 'Cape Verde',
'Korea, North' = 'North Korea'
)
rename_country <- function(country_name, mapping) {
if (country_name %in% names(mapping)) {
return(mapping[country_name])
} else {
return(country_name)
}
}
df <- df %>%
mutate(Country_Region = sapply(Country_Region, rename_country, mapping = name_mapping))
print(get_similar_text_pairs(df, 0.35))
name_mapping <- c('Hong Kong SAR' = 'Hong Kong',
'Mainland China' = 'China',
'Czechia' = 'Czech Republic',
'Gambia, The' = 'Gambia',
'Iran (Islamic Republic of)' = 'Iran',
'Russian Federation' = 'Russia',
'occupied Palestinian territory' = 'Palestine'
)
df <- df %>%
mutate(Country_Region = sapply(Country_Region, rename_country, mapping = name_mapping))
df %>%
select(Country_Region) %>%
distinct(Country_Region) %>%
arrange(Country_Region)
df <- df %>%
mutate(Country_Region = as.factor(Country_Region))
dataframe_size5 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size5, "MB"))
dataframe_size4 - dataframe_size5
stop()
df %>%
arrange(Date) %>%
group_by(Country_Region) %>%
mutate(Confirmed_Reported = Confirmed - lag(Confirmed, default = 0),
Deaths_Reported = Deaths - lag(Deaths, default = 0)) %>%
filter(Country_Region == "Switzerland")
df %>%
arrange(Date) %>%
group_by(Country_Region) %>%
mutate(Confirmed_Reported = Confirmed - lag(Confirmed, default = 0),
Deaths_Reported = Deaths - lag(Deaths, default = 0)) %>%
filter(Country_Region == "China")
# function to check if package is present
install_if_not_present <- function(pkg_name){
if(!requireNamespace(pkg_name, quietly = TRUE)){
install.packages(pkg_name)
}
}
install_if_not_present("plyr")
install_if_not_present("data.table")
install_if_not_present("pbapply")
install_if_not_present("dplyr")
install_if_not_present("purrr")
install_if_not_present("readr")
install_if_not_present("progress")
install_if_not_present("tidyverse")
install_if_not_present("readr")
library(plyr)
library(data.table)
library(pbapply)
library(dplyr)
library(purrr)
library(readr)
library(progress)
library(tidyverse)
library(readr)
# zip_path <- "./data/csse_covid_19_daily_reports.zip"
#
# # Temporären Ordner für das Entpacken der ZIP-Datei erstellen
# temp_dir <- tempfile()
# dir.create(temp_dir)
#
# # ZIP-Datei entpacken
# unzip(zip_path, exdir = temp_dir)
#
# # Alle CSV-Dateien im temporären Ordner auflisten
# files <- list.files(temp_dir, pattern = "\\.csv$", full.names = TRUE)
#
# # Fortschrittsbalken initialisieren
# pboptions(type = "timer")
#
# # Funktion, um das Datum aus dem Dateinamen zu extrahieren
# extract_date <- function(file_name) {
#   date_part <- gsub(".*(\\d{4}-\\d{2}-\\d{2}).csv", "\\1", basename(file_name))
#   as.Date(date_part)
# }
#
# # Daten einlesen und eine Datumsspalte hinzufügen
# list_data <- pblapply(files, function(file) {
#   data <- read_csv(file)
#   date_from_filename <- extract_date(file)
#   mutate(data, Datum = date_from_filename)
# })
#
# # Alle DataFrames zusammenführen
# final_data <- bind_rows(list_data)
#
# # Größe des DataFrames in MB berechnen
# dataframe_size <- object.size(final_data) / (1024^2)
# print(paste("Die Größe des DataFrames ist:", dataframe_size, "MB"))
#
# # Temporären Ordner löschen, wenn er nicht mehr benötigt wird
# unlink(temp_dir, recursive = TRUE)
# # Pfad zur ZIP-Datei
# zip_path <- "./data/csse_covid_19_daily_reports.zip"
#
# # Temporären Ordner für das Entpacken der ZIP-Datei erstellen
# temp_dir <- tempfile()
# dir.create(temp_dir)
#
# # ZIP-Datei entpacken
# unzip(zip_path, exdir = temp_dir)
#
# # Überprüfen, ob Dateien entpackt wurden
# unpacked_files <- list.files(temp_dir)
# print(unpacked_files)
#
# # Pfad zur ZIP-Datei
# zip_path <- "./data/csse_covid_19_daily_reports.zip"
#
# # Temporären Ordner für das Entpacken der ZIP-Datei erstellen
# temp_dir <- tempfile()
# dir.create(temp_dir)
#
# # ZIP-Datei entpacken
# unzip(zip_path, exdir = temp_dir)
#
# # Unterordner im entpackten Verzeichnis finden
# sub_dirs <- list.dirs(temp_dir, full.names = TRUE, recursive = FALSE)
# if (length(sub_dirs) == 0) {
#   stop("Kein Unterordner im ZIP-Archiv gefunden.")
# }
# sub_dir <- sub_dirs[1]
#
# # Alle CSV-Dateien im Unterordner auflisten
# files <- list.files(sub_dir, pattern = "\\.csv$", full.names = TRUE)
#
# # Fortschrittsbalken initialisieren
# pboptions(type = "timer")
#
# # Funktion, um das Datum aus dem Dateinamen zu extrahieren
# extract_date <- function(file_name) {
#   date_part <- gsub(".*(\\d{2}-\\d{2}-\\d{4}).*", "\\1", basename(file_name))
#   as.Date(date_part, format="%m-%d-%Y")
# }
#
# # Funktion, um die Daten zu lesen und zu bereinigen
# read_and_clean <- function(file) {
#   data <- read_csv(file, show_col_types = FALSE)
#   date_from_filename <- extract_date(file)
#   if (is.na(date_from_filename)) {
#     stop(paste("Datumskonvertierung fehlgeschlagen für Datei:", file))
#   }
#   # Konvertieren Sie alle Datum-/Zeit-Spalten in das gleiche Format, z.B. als character
#   data$Last_Update <- as.character(data$Last_Update)
#   mutate(data, Datum = date_from_filename)
# }
#
# # Daten einlesen und eine Datumsspalte hinzufügen
# list_data <- pblapply(files, read_and_clean)
#
# # Alle DataFrames zusammenführen
# final_data <- bind_rows(list_data)
#
# # Größe des DataFrames in MB berechnen
# dataframe_size <- object.size(final_data) / (1024^2)
# print(paste("Die Größe des DataFrames ist:", dataframe_size, "MB"))
#
# # Temporären Ordner löschen, wenn er nicht mehr benötigt wird
# unlink(temp_dir, recursive = TRUE)
# # Pfad zum Zip-Ordner
# zip_path <- "./data/csse_covid_19_daily_reports.zip"
#
# # Entpacke den Zip-Ordner in ein temporäres Verzeichnis
# temp_dir <- tempdir()
# unzip(zip_path, exdir = temp_dir)
#
# # Liste aller CSV-Dateien im Unterordner des entpackten Zip-Ordners
# files <- list.files(path = temp_dir, pattern = "\\.csv$", recursive = TRUE, full.names = TRUE)
#
# # Funktion, um das Datum aus dem Dateinamen zu extrahieren
# extract_date_from_filename <- function(filename) {
#   date_part <- gsub(".*(\\d{2}-\\d{2}-\\d{4}).csv", "\\1", basename(filename))
#   as.Date(date_part, format = "%d-%m-%Y")
# }
#
# # Funktion, um eine einzelne Datei zu lesen und das Datum hinzuzufügen
# read_csv_with_date <- function(file) {
#   df <- read_csv(file, col_types = cols())
#
#   # Überprüfen, ob die Spalte 'Last Update' existiert und keine leeren Werte hat
#   if (Last_Update %in% names(df) && nrow(df) > 0) {
#     df <- df %>% mutate(Last_Update = as.character(Last_Update))
#   } else {
#     warning(paste("Spalte 'Last Update' fehlt oder ist leer in Datei:", file))
#   }
#
#   date <- extract_date_from_filename(file)
#   df$date <- date
#   return(df)
# }
#
# # read_csv_with_date <- function(file) {
# #   # Bestimmen der Spalten, die gelesen werden sollen. 'Last Update' wird übersprungen
# #   col_types <- cols(`Last Update` = col_skip())
# #   df <- read_csv(file, col_types = col_types)
# #
# #   date <- extract_date_from_filename(file)
# #   df$date <- date
# #   return(df)
# # }
#
# # Lese alle Dateien und füge sie zusammen, zeige Fortschrittsbalken an
# all_data <- pblapply(files, read_csv_with_date) %>% bind_rows()
#
# # Größe des Dataframes in MB ausgeben
# dataframe_size <- object.size(all_data) / (1024^2)
# print(paste("Größe des Dataframes:", dataframe_size, "MB"))
#
# # Das resultierende Dataframe anzeigen (optional)
# print(all_data)
#
# # Aufräumen und temporäres Verzeichnis löschen
# unlink(temp_dir, recursive = TRUE)
# Einlesen der csv-Datei
df <- read.csv("COVID19_SHORT.csv")
dataframe_size1 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size1, "MB"))
head(df)
glimpse(df)
df <- df %>%
mutate(Date = ymd(Date)) %>%
mutate_at(vars(Confirmed, Deaths), as.integer)
dataframe_size2 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size2, "MB"))
dataframe_size1-dataframe_size2
glimpse(df)
df <- df %>%
filter(!((is.na(Confirmed) & is.na(Deaths)) | (Confirmed == 0 & Deaths == 0)))
df <- df %>%
arrange(Date)
# Überprüfen, ob alle Daten zwischen Start- und Enddatum vorhanden sind
date_sequence <- seq.Date(from = min(df$Date), to = max(df$Date), by = "day")
all_dates_present <- all(date_sequence %in% df$Date)
print(all_dates_present)
df %>%
filter(!is.na(Country_Region),
!is.na(Country.Region))
df %>%
filter(!is.na(Province_State),
!is.na(Province.State))
df <- df %>%
mutate(Country_Region = if_else(is.na(Country_Region), Country.Region, Country_Region)) %>%
mutate(Province_State = if_else(is.na(Province_State), Province.State, Province_State))
df <- df %>%
select(Date, Country_Region, Province_State, Confirmed, Deaths)
dataframe_size3 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size3, "MB"))
dataframe_size2-dataframe_size3
df <- df %>%
group_by(Date, Country_Region) %>%
summarise(Confirmed = sum(Confirmed, na.rm = TRUE), Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
dataframe_size4 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size4, "MB"))
dataframe_size3-dataframe_size4
# unique_countries <- unique(df$Country_Region)
unique_countries <- df %>%
select(Country_Region) %>%
distinct(Country_Region) %>%
arrange(Country_Region) %>%
pull(Country_Region)
print(unique_countries)
distances <- adist(unique_countries)
threshold <- nchar(unique_countries) * 0.3
similar_countries <- which(distances < threshold, arr.ind = TRUE)
similar_countries <- similar_countries[similar_countries[,1] != similar_countries[,2], ]
similar_country_pairs <- unique(t(apply(similar_countries, 1, function(idx) unique_countries[idx])))
print(similar_country_pairs)
get_similar_text_pairs <- function(df, threshold_num) {
unique_text <- df %>%
arrange(Country_Region) %>%
distinct(Country_Region) %>%
pull(Country_Region)
distances <- adist(unique_text)
threshold <- nchar(unique_text) * threshold_num
similar_text <- which(distances < threshold, arr.ind = TRUE)
similar_text <- similar_text[similar_text[,1] != similar_text[,2], ]
similar_text_pairs <- unique(t(apply(similar_text, 1, function(idx) unique_text[idx])))
return(similar_text_pairs)
}
print(get_similar_text_pairs(df, 0.3))
name_mapping <- c('Viet Nam' = 'Vietnam',
'Korea, South' = 'South Korea',
'Republic of Korea' = 'South Korea',
'Bahamas, The' = 'The Bahamas',
'Taiwan*' = 'Taiwan',
' Azerbaijan' = 'Azerbaijan',
'Cabo Verde' = 'Cape Verde',
'Korea, North' = 'North Korea'
)
rename_country <- function(country_name, mapping) {
if (country_name %in% names(mapping)) {
return(mapping[country_name])
} else {
return(country_name)
}
}
df <- df %>%
mutate(Country_Region = sapply(Country_Region, rename_country, mapping = name_mapping))
print(get_similar_text_pairs(df, 0.35))
name_mapping <- c('Hong Kong SAR' = 'Hong Kong',
'Mainland China' = 'China',
'Czechia' = 'Czech Republic',
'Gambia, The' = 'Gambia',
'Iran (Islamic Republic of)' = 'Iran',
'Russian Federation' = 'Russia',
'occupied Palestinian territory' = 'Palestine'
)
df <- df %>%
mutate(Country_Region = sapply(Country_Region, rename_country, mapping = name_mapping))
df %>%
select(Country_Region) %>%
distinct(Country_Region) %>%
arrange(Country_Region)
df <- df %>%
mutate(Country_Region = as.factor(Country_Region))
dataframe_size5 <- object.size(df) / (1024^2)
print(paste("Größe des Dataframes:", dataframe_size5, "MB"))
dataframe_size4 - dataframe_size5
df %>%
arrange(Date) %>%
group_by(Country_Region) %>%
mutate(Confirmed_Reported = Confirmed - lag(Confirmed, default = 0),
Deaths_Reported = Deaths - lag(Deaths, default = 0)) %>%
filter(Country_Region == "China")
df %>%
arrange(Date) %>%
group_by(Country_Region) %>%
mutate(Confirmed_Reported = Confirmed - lag(Confirmed, default = 0),
Deaths_Reported = Deaths - lag(Deaths, default = 0))
df <- df %>%
arrange(Date) %>%
group_by(Country_Region) %>%
mutate(Confirmed_Reported = Confirmed - lag(Confirmed, default = 0),
Deaths_Reported = Deaths - lag(Deaths, default = 0))
df %>%
mutate(Confirmed_Reported = ifelse(Confirmed_Reported >= 0, Confirmed_Reported, 0)) %>%
mutate(Deaths_Reported = ifelse(Deaths_Reported >= 0, Deaths_Reported, 0))
df <- df %>%
mutate(Confirmed_Reported = ifelse(Confirmed_Reported >= 0, Confirmed_Reported, 0)) %>%
mutate(Deaths_Reported = ifelse(Deaths_Reported >= 0, Deaths_Reported, 0))
